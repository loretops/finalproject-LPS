---
description: 
globs: 
alwaysApply: true
---
1. **Actualiza el archivo [prompts.md](mdc:docs/prompts.md), el que está dentro de la capeta prompts (no crees otro archivo prompts.md)** con cada prompt escrito por mi, solo lo que yo te pido o pregunto, no lo que tu resopondes, y que sea significativo (no añadas aquellos que no son importantes), en el formato acostumbrado markdown, y en el punto más acorde a lo que se busca desarrollar. Cuando se trate de prompts recurrentes para desarrollar los tickets de las Historias de Usuario se guardarán todos los prompts en su archivo correspondiete. Por ejemplo, para la Hiatoria de Usuario 2, hemos creado [prompts_HU2.md](mdc:prompts_HU2.md). Y desde [prompts.md](mdc:prompts.md) insertaremos un link para acceder a los prompts completos para el desarrollo de esa HU. 
2. **Añade los prompts de cada Historia de Usuario** en su archivo correspondiente en la carpeta `prompts` (por ejemplo, `prompts_HU7.md` para la Historia de Usuario 7), manteniendo el formato markdown y organizándolos cronológicamente. Estos archivos deben contener TODOS los prompts relacionados con esa HU, no solo un resumen.
3. Piensa lo que vas a hacer **paso a paso**
4. Si tienes dudas **pregúntame**, antes de hacer nada
5. Quiero un **proyecto sencillo**, **fácil de mantener**, y que **en el futuro pueda ser escalable**
6. Si se hace algún cambio en el modelo de bases de datos **revisa la actualización en el diseño, diagramas, esquemas y la popria base de datos**
7. Todo lo que hagas en el frontend debe cumplir **buenas practicas de UI y UX**. Usa las depoendencias y librerias disponibles. Si lo ves conveniente, propón la instalación de otras herramientas
8. Cada vez que vayas comprobando satisfactoriamente los criterios de aceptación de un ticket, así como su total desarrollo, o los fallos del mismo, así como los tests, debes **actualizar el archivo  docs/development_status.md**
9. existe un documento [production_deployment.md](mdc:docs/production_deployment.md) que sirve para llevar un control de lo que habrá que adaptar, configurar o desarrollar cuando pasemos a producción. Con cada desarrollo revisa si hay que hacer alguna indicación en ese documento y actualizadlo si lo ves necesario. 
10. usa buenas prácticas
- **Mantén sincronizados los esquemas de la base de datos** (usa migraciones de Prisma: `npx prisma migrate deploy`).
- **Revisa los logs de cada servicio** para detectar errores de configuración.
- **Configura CORS** correctamente en el backend para aceptar peticiones del frontend desplegado.
- **Protege las variables sensibles**: nunca las subas al repositorio.
- **Haz pruebas en cada entorno** antes de pasar a producción.
- **Documenta las URLs de cada servicio** para que el equipo las tenga localizadas.
- No t einventes ningún dato. Siempre han de venir de la base de datos. Ahora mismo, siempre se conulta ala base de datos de supabase, tanto en local como en la nube. El proyecto está en una fase en la nube para demo, ppero no son los datos definitivos, pero nunca uses datos ficticios, siempre consulta a la base de datos
- La conexión a la base de datos está perfecta con el archivo .env, no busques errores por ahi, sino busca como usar dotoenv para acceder bien a los valores

